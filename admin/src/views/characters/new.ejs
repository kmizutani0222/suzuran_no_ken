<div class="page-header">
  <h1>キャラ登録</h1>
</div>

  <div class="row">
    <div class="col s12">
      <div class="card">
        <div class="card-content">
          <form action="/characters" method="post" enctype="multipart/form-data">
            <div class="row">
              <div class="input-field col s6">
                <input type="text" id="name" name="name" required />
                <label for="name">名前</label>
              </div>
              <div class="input-field col s6">
                <select name="rarityId">
                  <option value="">未選択</option>
                  <% rarities.forEach(r => { %>
                    <option value="<%= r.id %>"><%= r.name %> (★<%= r.value %>)</option>
                  <% }) %>
                </select>
                <label>レアリティ（任意）</label>
              </div>
            </div>

            <div class="row">
              <div class="input-field col s6">
                <select name="roleId">
                  <option value="">未選択</option>
                  <% roles.forEach(r => { %>
                    <option value="<%= r.name %>"><%= r.name %></option>
                  <% }) %>
                </select>
                <label>ロール（任意）</label>
              </div>
              <div class="input-field col s6">
                <select name="weaponType">
                  <option value="">未選択</option>
                  <% ["剣","槍","斧","杖","弓"].forEach(w => { %>
                    <option value="<%= w %>"><%= w %></option>
                  <% }) %>
                </select>
                <label>武器種（任意）</label>
              </div>
            </div>

            <div class="row">
              <div class="col s12">
                <div class="form-section">
                  <legend>陣営（複数選択可）</legend>
                  <div class="faction-selection">
                    <% factions.forEach(f => { %>
                      <label class="faction-checkbox">
                        <input type="checkbox" name="factionIds" value="<%= f.id %>" />
                        <span><%= f.name %></span>
                      </label>
                    <% }) %>
                  </div>
                </div>
              </div>
            </div>

            <div class="form-section">
              <div class="row">
                <div class="input-field col s6">
                  <h6 class="image-section-title">通常外見</h6>
                <div class="image-preview-container">
                  <div id="normalAppearance-preview" class="image-preview-large clickable-preview" onclick="selectNormalAppearance()">
                    <div class="no-image">
                      <i class="material-icons">image</i>
                      <span>画像が選択されていません</span>
                    </div>
                  </div>
                </div>
                <div class="image-controls">
                  <div class="file-input-wrapper">
                    <input type="file" name="normalAppearance" accept="image/*" onchange="imageResizer.handleImageUpload(this, 'normalAppearance')" id="normalAppearance-file-input" style="display: none;" />
                  </div>
                </div>
                </div>
                <div class="input-field col s6">
                  <h6 class="image-section-title">ピクセルアバター</h6>
                  <div class="image-preview-container">
                    <div id="pixelAvatar-preview" class="image-preview-large clickable-preview" onclick="selectPixelAvatar()">
                      <div class="no-image">
                        <i class="material-icons">image</i>
                        <span>画像が選択されていません</span>
                      </div>
                    </div>
                  </div>
                  <div class="image-controls">
                    <div class="file-input-wrapper">
                      <input type="file" name="pixelAvatar" accept="image/*" onchange="imageResizer.handleImageUpload(this, 'pixelAvatar')" id="pixelAvatar-file-input" style="display: none;" />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="form-section">
              <legend>個性スキル</legend>
              <div class="input-field">
                <select name="personalitySkillId">
                  <option value="">未設定</option>
                  <% personalitySkills.forEach(s => { %>
                    <option value="<%= s.id %>"><%= s.name %></option>
                  <% }) %>
                </select>
                <label>個性スキル</label>
              </div>
            </div>

            <div class="form-section">
              <legend>スキルツリー（通常スキルを左右に1つずつ）</legend>
              <% const ranks = ["RK1","RK3","RK5","RK7","RK9","RK11"]; %>
              <% ranks.forEach(rk => { %>
                <div class="row mb-20">
                  <div class="col s12">
                    <h6><strong><%= rk %></strong></h6>
                    <div class="row">
                      <div class="input-field col s6">
                        <select name="<%= rk %>_left">
                          <option value="">なし</option>
                          <% normalSkills.forEach(s => { %>
                            <option value="<%= s.id %>"><%= s.name %></option>
                          <% }) %>
                        </select>
                        <label>左スキル</label>
                      </div>
                      <div class="input-field col s6">
                        <select name="<%= rk %>_right">
                          <option value="">なし</option>
                          <% normalSkills.forEach(s => { %>
                            <option value="<%= s.id %>"><%= s.name %></option>
                          <% }) %>
                        </select>
                        <label>右スキル</label>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>

            <div class="form-section">
              <legend>EXスキル（複数選択）</legend>
              <div class="faction-selection">
                <% exSkills.forEach(s => { %>
                  <label class="faction-checkbox">
                    <input type="checkbox" name="exSkillIds" value="<%= s.id %>" />
                    <span><%= s.name %></span>
                  </label>
                <% }) %>
              </div>
            </div>

            <div class="row">
              <div class="col s12 text-center">
                <button type="submit" class="btn-large waves-effect waves-light blue">
                  <i class="material-icons left">save</i>登録
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
<!-- 固定配置の戻るボタン -->
<a href="/characters" class="btn-floating fab-back waves-effect waves-light grey">
  <i class="material-icons">arrow_back</i>
</a>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // ファイル入力の変更を監視してプレビューを更新
  const normalAppearanceFileInput = document.getElementById('normalAppearance-file-input');
  const pixelAvatarFileInput = document.getElementById('pixelAvatar-file-input');
  
  if (normalAppearanceFileInput) {
    normalAppearanceFileInput.addEventListener('change', handleNormalAppearanceFileChange);
  }
  
  if (pixelAvatarFileInput) {
    pixelAvatarFileInput.addEventListener('change', handlePixelAvatarFileChange);
  }
});

// 通常外見選択機能
function selectNormalAppearance() {
  document.getElementById('normalAppearance-file-input').click();
}

// ピクセルアバター選択機能
function selectPixelAvatar() {
  document.getElementById('pixelAvatar-file-input').click();
}

// 通常外見ファイル入力の変更を監視してプレビューを更新
function handleNormalAppearanceFileChange(e) {
  if (e.target.files && e.target.files[0]) {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
      const normalAppearancePreview = document.getElementById('normalAppearance-preview');
      if (normalAppearancePreview) {
        normalAppearancePreview.innerHTML = `
          <img src="${e.target.result}" alt="選択された通常外見" />
          <button type="button" class="remove-icon-btn" onclick="event.stopPropagation(); resetNormalAppearance()">
            <i class="material-icons">close</i>
          </button>
        `;
        // 画像選択後はクリック不可にする
        normalAppearancePreview.classList.remove('clickable-preview');
        normalAppearancePreview.onclick = null;
      }
    };
    reader.readAsDataURL(file);
  }
}

// ピクセルアバターファイル入力の変更を監視してプレビューを更新
function handlePixelAvatarFileChange(e) {
  if (e.target.files && e.target.files[0]) {
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
      const pixelAvatarPreview = document.getElementById('pixelAvatar-preview');
      if (pixelAvatarPreview) {
        pixelAvatarPreview.innerHTML = `
          <img src="${e.target.result}" alt="選択されたピクセルアバター" />
          <button type="button" class="remove-icon-btn" onclick="event.stopPropagation(); resetPixelAvatar()">
            <i class="material-icons">close</i>
          </button>
        `;
        // 画像選択後はクリック不可にする
        pixelAvatarPreview.classList.remove('clickable-preview');
        pixelAvatarPreview.onclick = null;
      }
    };
    reader.readAsDataURL(file);
  }
}

// 通常外見リセット機能
function resetNormalAppearance() {
  const normalAppearancePreview = document.getElementById('normalAppearance-preview');
  const fileInput = document.getElementById('normalAppearance-file-input');
  
  if (normalAppearancePreview) {
    // プレビューを完全にクリア
    normalAppearancePreview.innerHTML = `
      <div class="no-image">
        <i class="material-icons">image</i>
        <span>画像が選択されていません</span>
      </div>
    `;
    // クリック可能にする
    normalAppearancePreview.classList.add('clickable-preview');
    normalAppearancePreview.onclick = selectNormalAppearance;
    
    // すべての×ボタンを確実に削除
    const removeButtons = normalAppearancePreview.querySelectorAll('.remove-icon-btn');
    removeButtons.forEach(btn => btn.remove());
  }
  
  if (fileInput) {
    fileInput.value = '';
  }
}

// ピクセルアバターリセット機能
function resetPixelAvatar() {
  const pixelAvatarPreview = document.getElementById('pixelAvatar-preview');
  const fileInput = document.getElementById('pixelAvatar-file-input');
  
  if (pixelAvatarPreview) {
    // プレビューを完全にクリア
    pixelAvatarPreview.innerHTML = `
      <div class="no-image">
        <i class="material-icons">image</i>
        <span>画像が選択されていません</span>
      </div>
    `;
    // クリック可能にする
    pixelAvatarPreview.classList.add('clickable-preview');
    pixelAvatarPreview.onclick = selectPixelAvatar;
    
    // すべての×ボタンを確実に削除
    const removeButtons = pixelAvatarPreview.querySelectorAll('.remove-icon-btn');
    removeButtons.forEach(btn => btn.remove());
  }
  
  if (fileInput) {
    fileInput.value = '';
  }
}
</script> 