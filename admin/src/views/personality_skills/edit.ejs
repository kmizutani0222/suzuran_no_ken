<div class="page-header">
  <h1>個性スキル編集</h1>
</div>

<div class="row">
  <div class="col s12">
    <div class="card">
      <div class="card-content">
        <form action="/personality-skills/<%= item.id %>?_method=PUT" method="post" enctype="multipart/form-data">
          <input type="hidden" name="currentIcon" value="<%= item.icon || '' %>" />
          <input type="hidden" name="iconReset" id="iconReset" value="false" />

          <!-- 1行目: 左側に名前、右側にアイコン -->
          <div class="row">
            <div class="col s6">
              <div class="input-field">
                <input type="text" id="name" name="name" value="<%= item.name %>" required />
                <label for="name">名前</label>
              </div>
            </div>
            <div class="col s6">
              <h6 class="image-section-title">アイコン</h6>
              <div class="image-preview-container">
                <div id="icon-preview" class="image-preview-large clickable-preview" onclick="selectIcon()">
                  <% if (item.icon) { %>
                    <img src="/uploads/<%= item.icon %>" alt="<%= item.name %>" />
                    <button type="button" class="remove-icon-btn" onclick="event.stopPropagation(); resetIcon()">
                      <i class="material-icons">close</i>
                    </button>
                  <% } else { %>
                    <div class="no-image">
                      <i class="material-icons">image</i>
                      <span>画像が選択されていません</span>
                    </div>
                  <% } %>
                </div>
              </div>
              <div class="image-controls">
                <div class="file-input-wrapper">
                  <input type="file" name="icon" accept="image/*" onchange="imageResizer.handleImageUpload(this, 'icon')" id="icon-file-input" style="display: none;" />
                </div>
              </div>
            </div>
          </div>

          <!-- 星1の説明 -->
          <div class="row">
            <div class="input-field col s12">
              <textarea id="star1Description" name="star1Description" class="materialize-textarea"><%= item.star1Description %></textarea>
              <label for="star1Description">星1の説明（任意）</label>
            </div>
          </div>

          <!-- 星2の説明 -->
          <div class="row">
            <div class="input-field col s12">
              <textarea id="star2Description" name="star2Description" class="materialize-textarea"><%= item.star2Description %></textarea>
              <label for="star2Description">星2の説明（任意）</label>
            </div>
          </div>

          <!-- 星3の説明 -->
          <div class="row">
            <div class="input-field col s12">
              <textarea id="star3Description" name="star3Description" class="materialize-textarea"><%= item.star3Description %></textarea>
              <label for="star3Description">星3の説明（任意）</label>
            </div>
          </div>

          <!-- 星4の説明 -->
          <div class="row">
            <div class="input-field col s12">
              <textarea id="star4Description" name="star4Description" class="materialize-textarea"><%= item.star4Description %></textarea>
              <label for="star4Description">星4の説明（任意）</label>
            </div>
          </div>

          <!-- 星5の説明 -->
          <div class="row">
            <div class="input-field col s12">
              <textarea id="star5Description" name="star5Description" class="materialize-textarea"><%= item.star5Description %></textarea>
              <label for="star5Description">星5の説明（任意）</label>
            </div>
          </div>

          <!-- スキル効果 -->
          <div class="row">
            <div class="col s12">
              <div class="form-section">
                <legend>スキル効果（複数選択）</legend>
                <div class="faction-selection">
                  <% skillEffects.forEach(e => { %>
                    <label class="faction-checkbox">
                      <input type="checkbox" name="effectIds" value="<%= e.id %>"
                             <%= item.effectIds && item.effectIds.includes(e.id) ? 'checked' : '' %> />
                      <span><%= e.name %></span>
                    </label>
                  <% }) %>
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col s12 text-center">
              <button type="submit" class="btn-large waves-effect waves-light blue">
                <i class="material-icons left">save</i>更新
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- 固定配置の戻るボタン -->
<a href="/personality-skills" class="btn-floating fab-back waves-effect waves-light grey">
  <i class="material-icons">arrow_back</i>
</a>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // テキストエリアのラベルを適切に配置
    M.textareaAutoResize(document.getElementById('star1Description'));
    M.textareaAutoResize(document.getElementById('star2Description'));
    M.textareaAutoResize(document.getElementById('star3Description'));
    M.textareaAutoResize(document.getElementById('star4Description'));
    M.textareaAutoResize(document.getElementById('star5Description'));
    
    // ファイル入力の変更を監視してプレビューを更新
    const fileInput = document.getElementById('icon-file-input');
    if (fileInput) {
      fileInput.addEventListener('change', handleFileChange);
    }
  });

  // アイコン選択機能
  function selectIcon() {
    document.getElementById('icon-file-input').click();
  }

  // ファイル入力の変更を監視してプレビューを更新し、iconResetフラグをリセット
  function handleFileChange(e) {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      const reader = new FileReader();
      reader.onload = function(e) {
        const iconPreview = document.getElementById('icon-preview');
        if (iconPreview) {
          iconPreview.innerHTML = `
            <img src="${e.target.result}" alt="選択されたアイコン" />
            <button type="button" class="remove-icon-btn" onclick="event.stopPropagation(); resetIcon()">
              <i class="material-icons">close</i>
            </button>
          `;
          // 画像選択後はクリック不可にする
          iconPreview.classList.remove('clickable-preview');
          iconPreview.onclick = null;
        }
        
        // 新しい画像が選択されたら、iconResetフラグを削除
        document.getElementById('iconReset').value = 'false';
      };
      reader.readAsDataURL(file);
    }
  }

  // アイコンリセット処理
  function resetIcon() {
    const iconPreview = document.getElementById('icon-preview');
    const fileInput = document.getElementById('icon-file-input');
    
    if (iconPreview) {
      // プレビューを完全にクリア
      iconPreview.innerHTML = `
        <div class="no-image">
          <i class="material-icons">image</i>
          <span>画像が選択されていません</span>
        </div>
      `;
      // クリック可能にする
      iconPreview.classList.add('clickable-preview');
      iconPreview.onclick = selectIcon;
      
      // すべての×ボタンを確実に削除
      const removeButtons = iconPreview.querySelectorAll('.remove-icon-btn');
      removeButtons.forEach(btn => btn.remove());
    }
    
    if (fileInput) {
      fileInput.value = '';
    }
    
    // アイコンリセットフラグを設定
    document.getElementById('iconReset').value = 'true';
  }
</script> 